// <auto-generated />
using System;
using BE.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BE.Migrations
{
    [DbContext(typeof(MyAppDBContext))]
    [Migration("20250701034411_Build DB")]
    partial class BuildDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BE.Data.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("Char(10)");

                    b.Property<string>("AccountTypeId")
                        .IsRequired()
                        .HasColumnType("Char(10)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(3000)
                        .HasColumnType("VarChar(3000)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("NVarChar(20)");

                    b.Property<string>("LastMiddleName")
                        .HasMaxLength(40)
                        .HasColumnType("NVarChar(40)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("BE.Data.Entities.AccountAuthen", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("Char(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VarChar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("VarChar(25)");

                    b.HasKey("Id");

                    b.ToTable("AccountAuthen");
                });

            modelBuilder.Entity("BE.Data.Entities.AccountType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("Char(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVarChar(20)");

                    b.HasKey("Id");

                    b.ToTable("AccountType");

                    b.HasData(
                        new
                        {
                            Id = "0000000000",
                            Name = "Quản trị"
                        },
                        new
                        {
                            Id = "0000000001",
                            Name = "Giáo viên"
                        },
                        new
                        {
                            Id = "0000000002",
                            Name = "Học sinh"
                        });
                });

            modelBuilder.Entity("BE.Data.Entities.Answer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("Char(10)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("NVarChar(1000)");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("Bit");

                    b.Property<string>("QuestionID")
                        .IsRequired()
                        .HasColumnType("Char(10)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("BE.Data.Entities.AttemptQuiz", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("Char(10)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("Char(10)");

                    b.Property<DateTime>("AttemptTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("Char(10)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("QuizId");

                    b.ToTable("AttemptQuiz");
                });

            modelBuilder.Entity("BE.Data.Entities.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("Char(10)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(3000)
                        .HasColumnType("VarChar(3000)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("NVarChar(100)");

                    b.Property<string>("HostId")
                        .HasColumnType("Char(10)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("Bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVarChar(20)");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("BE.Data.Entities.DetailResult", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasColumnType("Char(10)");

                    b.Property<string>("AttemptQuizId")
                        .HasColumnType("Char(10)");

                    b.HasKey("AnswerId", "AttemptQuizId");

                    b.HasIndex("AttemptQuizId");

                    b.ToTable("DetailResult");
                });

            modelBuilder.Entity("BE.Data.Entities.JoinCourse", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("Char(10)");

                    b.Property<string>("CourseID")
                        .HasColumnType("Char(10)");

                    b.Property<DateTime>("TimeJoin")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("AccountID", "CourseID", "TimeJoin");

                    b.HasIndex("CourseID");

                    b.ToTable("JoinCourse");
                });

            modelBuilder.Entity("BE.Data.Entities.PasswordResetToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordResetToken");
                });

            modelBuilder.Entity("BE.Data.Entities.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("Char(10)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("NVarChar(1000)");

                    b.Property<string>("QuizId")
                        .HasColumnType("Char(10)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("BE.Data.Entities.Quiz", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("Char(10)");

                    b.Property<string>("CourseID")
                        .IsRequired()
                        .HasColumnType("Char(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("NVarChar(100)");

                    b.Property<DateTime>("DueTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVarChar(30)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("BE.Data.Entities.Account", b =>
                {
                    b.HasOne("BE.Data.Entities.AccountType", "OAccountType")
                        .WithMany("LAccounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE.Data.Entities.AccountAuthen", "OAccountAuthen")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OAccountAuthen");

                    b.Navigation("OAccountType");
                });

            modelBuilder.Entity("BE.Data.Entities.Answer", b =>
                {
                    b.HasOne("BE.Data.Entities.Question", "OQuestion")
                        .WithMany("LAnswers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OQuestion");
                });

            modelBuilder.Entity("BE.Data.Entities.AttemptQuiz", b =>
                {
                    b.HasOne("BE.Data.Entities.Account", "OAccount")
                        .WithMany("LAttemptQuizzes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE.Data.Entities.Quiz", "OQuiz")
                        .WithMany("LAttemptQuizzes")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OAccount");

                    b.Navigation("OQuiz");
                });

            modelBuilder.Entity("BE.Data.Entities.Course", b =>
                {
                    b.HasOne("BE.Data.Entities.Account", "OHost")
                        .WithMany("LOwnCourses")
                        .HasForeignKey("HostId");

                    b.Navigation("OHost");
                });

            modelBuilder.Entity("BE.Data.Entities.DetailResult", b =>
                {
                    b.HasOne("BE.Data.Entities.Answer", "OAnswer")
                        .WithMany("LDetailResults")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE.Data.Entities.AttemptQuiz", "OAttemptQuiz")
                        .WithMany("LDetailResults")
                        .HasForeignKey("AttemptQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OAnswer");

                    b.Navigation("OAttemptQuiz");
                });

            modelBuilder.Entity("BE.Data.Entities.JoinCourse", b =>
                {
                    b.HasOne("BE.Data.Entities.Account", "OAccount")
                        .WithMany("LJoinCourses")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BE.Data.Entities.Course", "OCourse")
                        .WithMany("LJoinCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OAccount");

                    b.Navigation("OCourse");
                });

            modelBuilder.Entity("BE.Data.Entities.Question", b =>
                {
                    b.HasOne("BE.Data.Entities.Quiz", "OQuiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId");

                    b.Navigation("OQuiz");
                });

            modelBuilder.Entity("BE.Data.Entities.Quiz", b =>
                {
                    b.HasOne("BE.Data.Entities.Course", "OCourse")
                        .WithMany("LQuizes")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OCourse");
                });

            modelBuilder.Entity("BE.Data.Entities.Account", b =>
                {
                    b.Navigation("LAttemptQuizzes");

                    b.Navigation("LJoinCourses");

                    b.Navigation("LOwnCourses");
                });

            modelBuilder.Entity("BE.Data.Entities.AccountType", b =>
                {
                    b.Navigation("LAccounts");
                });

            modelBuilder.Entity("BE.Data.Entities.Answer", b =>
                {
                    b.Navigation("LDetailResults");
                });

            modelBuilder.Entity("BE.Data.Entities.AttemptQuiz", b =>
                {
                    b.Navigation("LDetailResults");
                });

            modelBuilder.Entity("BE.Data.Entities.Course", b =>
                {
                    b.Navigation("LJoinCourses");

                    b.Navigation("LQuizes");
                });

            modelBuilder.Entity("BE.Data.Entities.Question", b =>
                {
                    b.Navigation("LAnswers");
                });

            modelBuilder.Entity("BE.Data.Entities.Quiz", b =>
                {
                    b.Navigation("LAttemptQuizzes");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
